#+include: ~/OrgFiles/armin/org-macros.setup
#+OPTIONS: h:1 num:nil toc:nil d:nil

#+TITLE: consult-mu - use consult to search mu4e dynamically or asynchronously
#+AUTHOR: Armin Darvish
#+LANGUAGE: en

#+html: <a href="https://github.com/armindarvish"><img alt="Armin Darvish" src="https://img.shields.io/static/v1?label=Armin%20Darvish&message=consult-mu&color=00A8B0&logo=github"/></a>
#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://img.shields.io/static/v1?label=Made%20For&message=GNU%20Emacs&color=7a5aba&logo=gnuemacs&logoColor=white"/></a>



* About consult-mu

** Main Functions and Interactive Commands
Consult-mu provides a dynamiccaly updated search interface to mu4e. It uses the awesome package [[https://github.com/minad/consult][consult]] by [[https://github.com/minad][Daniel Mendler]] and [[https://github.com/djcb/mu][mu/mu4e]] by [[https://github.com/djcb/][Dirk-Jan C. Binnema,]] and optionally [[https://github.com/oantolin/embark][Embark]] by [[https://github.com/oantolin][Omar Antol√≠n Camarena]] to improve the search experience of mu4e. There two main interactive commands:

1. =consult-mu=: Provides a dynamic version of =mu4e-search=. As the user types inputs, the result gets updated. This command uses a modified version of =mu4e-search= and then takes the content of =mu4e-headers= buffer to populate minibuffer completion table. This allows the user to change the query or search properties (such as number of results, sort-field, sort-direction, ...) dynamically by changing the input in the minibuffer. In addition previews of the results can be viewed similar to other consult functions. Once a candidate is selected, the user will see the search result sin =mu4e-headers=, and =mu4e-view= buffers similar to mu4e-search results.

2. =consult-mu-async=: This function provides a very fast search without loading mu4e-headers, which means mu4e functionalities (like marks, reply, forwards, etc.) are not available in the preview buffer. This is very useful for finding individual emails or threads in a large pool quickly (in other words "a needle in a haystack" scenarios!). Previews can be seen while the results are being populated asynchronously (without populating mu4e-headers buffer). Upon selection of a candidate, mu4e-headers buffer is populated with only an individual email (or thread). From here all the normal functionalities of mu4e is again available.

The advantage of =consult-mu-async= over =consult-mu= is that it is very fast for searching several thousands messages (even faster than [[https://github.com/emacsmirror/consult-notmuch][consult-notmuch]]!), but cannot populate a mu4e-headers buffer with all the results. On the other hand, =consult-mu= is slower when there are thousands of hits for the search term but provides full functionality for all the results. Therefore depending on the use case, the user can chose which functions serves the purpose better.

Furthermore, consult-mu, also provides a number of useful [[https://github.com/oantolin/embark][Embark]] actions that can be called from within minibuffer (see examples below.). However, wehn using embark actions, be advised that sometimes you may get an error especially when using =consult-mu-async=. These are likely not critical errors and are usually caused because after running embark actions the databse can be out of sync with the results. In such cases syncing the database should resolve the issue.

** Why we need a new package such as consult-mu?
While mu4e built-in search is great and provides ways to edit search terms or toggle search properties, the interface is not really intuitive in 2023 anymore. I am simply too impatient to wait for search results (especially if there are hundreds or thousands of hits) and much prefer having a dynamically updated completion table. Thankfully this is easily available now by using [[https://github.com/minad/consult][consult]].

*** Why not use other alternatives like [[https://github.com/emacsmirror/consult-notmuch][consult-notmuch]]?
While [[https://notmuchmail.org/notmuch-emacs/][notmuch-emacs]] and [[https://github.com/emacsmirror/consult-notmuch][consult-notmuch]] provide a very fast email search and view functionality, notmuch lacks lots of basic functionalitites of an email client. It is supposed to be notmuch after all! As a result, using notmuch as an email client is not very practical especially if you want to use it along with other mail clients (e.g. web-clients, mobile apps, etc.) While in Emacs nothing is impossible and there are ways to add such functionalities and improve the experience (  and for examples), the end results is still likely not the easiest solution to integrate with other tools (like mobile apps, or IMAP based clients). This is because the philosophy of using tags instead of folders requires a completed redesign of workflows and unless you are willing to stick to notmuch and its philosophy, it is difficult to use it as a general purpose email client.

More importantly, the reason people prefer notmuch over mu4e is its speed and simplicity, but using the underlying =mu= commands and server can also be very fast. In fact (at least in my tests), =consult-mu-async=, which uses the command line =mu= commands is in fact faster than =consult-notmuch=, and therefore using =mu4e= with =consult-mu= provides the best of both worlds to me. When I need speed, I can use =consult-mu-async= to do a fast search (and find thousands of hits) and quickly narrow down to what I am looking for; and when I need a more complete and full-feature client I can use =mu4e= built-in functionalities, especially with addition of dynamically built searches with =consult-mu=, I have a modern intuitive interface as well.

* Getting Started
** Installation
Before you start, make sure you understand that this is work in progress in its early stage and bugs and breaks are very much expected.
*note that*: Because [[https://github.com/djcb/mu][mu4e]] tends to take over buffer/windows management, I had to reimplement (a.k.a. hack) some of the functionalities in order to provide quick previews that stay out of your the way when the minibuffer command is done (or canceled), and as a result there is a good chance that errors will arise in edge cases that I have not tested.

*** Requirements
In order to use consult-mu, you need the following requirements:

**** [[https://github.com/djcb/mu][mu4e]]:

You can access the official documentation for mu4e here: [[https://www.djcbsoftware.nl/code/mu/mu4e/][mu4e official manual]]. If you need step-by-step instructions or prefer videos, there are many useful tutorials online.  Here are a few good links:

- EmacsWiki: [[https://www.emacswiki.org/emacs/mu4e][EmacsWiki: mu4e]]
- SystemCrafters Videos: [[https://www.youtube.com/watch?v=yZRyEhi4y44][Streamline Your E-mail Management with mu4e - Emacs Mail - YouTube]] & [[https://www.youtube.com/watch?v=olXpfaSnf0o][Managing Multiple Email Accounts with mu4e and mbsync - Emacs Mail - YouTube]]
- Setting Mu4e on MacOS: [[https://macowners.club/posts/email-emacs-mu4e-macos/][Email setup in Emacs with Mu4e on macOS | macOS & (open-source) Software]]

**** [[https://github.com/minad/consult][consult]]:

To install consult follow the official instructions here: [[https://github.com/minad/consult#configuration][Configuration of Consult.]]

Also, make sure you review Consult's README since it recommends some other packages and useful configurations for different settings. Some of those may improve your experience of consult-mu as well. In particular the section about [[https://github.com/minad/consult#asynchronous-search][asynchronous search]] is important for learning how to use inputs to search for result and narrow down in minibuffer.


*** Installing consult-mu package
Consult-mu is not currently on [[https://elpa.gnu.org/packages/consult.html][ELPA]] or [[https://melpa.org/#/consult][MELPA]]. Therefore, you need to install it using an alternative non-standard package managers such as [[https://github.com/radian-software/straight.el][straight.el]] or use manual installation.

**** straight.el
To install consult-mu with straight.el you can use the following command. Make sure you load consult-mu *after loading mu4e and consult (e.g. =require consult=, =require mu4e=)*

#+begin_src emacs-lisp
(straight-use-package
 '(consult-mu :type git :host github :repo "armindarvish/consult-mu" :branch "main"))
#+end_src

or if you use =use-package= macro with straight, you can do:

#+begin_src emacs-lisp
(use-package consult-mu
	:straight (consult-mu :type git :host github :repo "armindarvish/consult-mu"
        :after mu4e consult)
)
#+end_src

You can also fork this repository and use your own repo.

**** manual installation
Clone this repo and make sure the files are on your load path, as described on [[https://www.emacswiki.org/emacs/LoadPath][EmacsWiki]].

*Make sure you load consult and mu4e (e.g. =require consult=, =require mu4e=) before you load consult-mu.*

** Configuration
consult-mu is built with the idea that the user should be able to customize everything based on their use-case, therefore the user is very much expected to configure consult-mu according to their use case.

I recommend you read through this section and understand how to configure the package according to your needs and for your specific use-case, but if you just want a drop-in minimal config, look at the snippet below:

#+begin_src emacs-lisp
(use-package consult-mu
  :straight (consult-mu :type git :host github :repo "armindarvish/consult-mu" :branch "develop")
  :after (consult mu4e)
  :custom
  ;;maximum number of results shown in minibuffer
  (consult-mu-maxnum 200)
  ;;show preview when pressing any keys
  (consult-mu-preview-key 'any)
  ;;do not mark email as read when previewed
  (consult-mu-mark-previewed-as-read nil)
  ;;do not amrk email as read when selected. This is a good starting point to ensure you would not miss important emails marked as read by mistake especially when trying this package out. Later you can change this to t.
  (consult-mu-mark-viewed-as-read nil)
  ;; open the message in mu4e-view-buffer when selected.
  (consult-mu-action #'consult-mu--view-action)
  )
#+end_src

*** Customization
The following customizable variables are provided:

**** =consult-mu-headers-buffer-name=
This is the default name for HEADERS buffer explicitly for consult-mu. It is, by default, set to ="**consult-mu-headers**"=. Note that currently, the header-buffer name is a constant string and shared between all instances of consult-mu calls. This is to prevent running operations in parallel that cause out-of-sync issues.

**** =consult-mu-view-buffer-name=
This is the default name for VIEW buffer explicitly for consult-mu. It is, by default, set to ="**consult-mu-view**"=. Note that currently, the view-buffer name is a constant string and shared between all instances of consult-mu calls. This is to prevent creating too many preview buffers and executing operations (such as marking) in parallel that cause out-of-sync issues.

**** =consult-mu-args=
This is the default name of the =mu= command line argument. It is set to ="mu"= by default, but can be modified for example if mu is at a different path on your system.

**** =consult-mu-maxnum=
Maximum number of messages shown in search results (in consult-mu minibuffer completion table). This is a global option for consult-mu and consult-mu-async, but can be overriden by providing command line arguments in input for example, the following search would fetch up to 1000 results

#+begin_example
#github -- --maxnum 1000
#+end_example


**** =consult-mu-search-sort-field=
This defines the field that is used for sorting the results. It has to be one of the keywords:
- =:date=  sort by date
- =:subject= sort by title of the email
- =:size= sort by file size
- =:prio= sort by priority
- =:from= sort by name/email of the sender(s)
- =:to= sort by name/email of receivers
- =:list= sort by mailing list

For more information refer to documentation on the variable =mu4e-search-sort-field=.

**** =consult-mu-headers-fields=
This variable is used to format the headers inside minibuffer. This takes a similar format to =mu4e-headers-fields= and changes the format of the header only in minibuffer (=consult-mu= or =consult-mu-async=).

Note that it is generally recommended to use =consult-mu-headers-template= below because it has more options and does not affect the consult-mu-headers buffer.

**** =consult-mu-headers-template=
This is a template string that overrides the consult-mu-headers-field to format headers. It provides more options than =consult-mu-headers-field= and is generally the recommended approach to make custom headers.
Special chaacters in the string (either ‚Äú%[char]" or ‚Äú%[char][integer]‚Äù) in the string get expanded to create headers. Each character represents a different field and the integer defines the length of the field. For exmaple "%d15%s50" means 15 characters for date and 50 charcters for subject.

The list of available fields are:

  %f  sender(s) (e.g. from: field of email)
  %t  receivers(s) (i.e. to: field of email)
  %s  subject (i.e. title of email)
  %d  date (i.e. the date email was sent/received) with the format "Thu 09 Nov 23"
  %p  priority
  %z  size
  %i  message-id (as defined by mu)
  %g  flags (as defined by mu)
  %G  pretty flags (this uses mu4e~headers-flags-str to pretify flags)
  %x  tags (as defined by mu)
  %c  cc (i.e. cc: field of the email)
  %h  bcc (i.e. bcc: field of the email)
  %r  date chaged (as defined by :changed in mu4e)

For example, the string ="%d13%s50%f17"= would make a header containing =13= characters for =date=, =50= characters for =subject=, and =20= characters for =from= field, making a header that looks like this:

#+begin_example
Thu 09 Nov 23  Title of the Email Limited to 50 Characters Onl...  example@domain...
#+end_example

Note that the sort field can dynamically be changed by providing command line arguments in the minibuffer input.

For example the following input in the minibuffer will search for emails that are flagged unread but then overrides the sort field and change it t =subject=. For details on how to use command line arguments refer to mu  manual (e.g. by running =mu find --help= in the command line)

#+begin_example
#flag:unread -- -s s
#+end_example

**** =consult-mu-search-sort-direction=
Direction of sort. It can either be ='ascending= for A->Z (low number to high number) or ='descending= for Z->A (high number to low number). Note that if a command line argument for reverse order (either -z or --reverse) is provided in the minibuffer, the order will be reverse of the setting defined by this variable.

For example, if =consult-mu-search-sort-field= is set to =:date= and =consult-mu-search-sort-direction= is set to ='descending= the messages are sortes chronologically from the newest on top to the oldest. Then providing a reverse order argument in the minibuffer can dynamically reverse the sort direction:

For example the following input in the minibuffer searches for all =unread= emails under ="./inbox"= path then *reverses the sort direction* (because of =-z= command line argument)
#+begin_example
#(maildir:/inbox) AND flag:unread -- -z
#+end_example


**** =consult-mu-search-threads=
This variable determines whether threads are calculated for search results or not similar to the =mu4e-search-threads= variable.

Note that per mu4e docs:
When threading is enabled, the headers are exclusively sorted chronologically (:date) by the newest message in the thread.

When this variable is set to nil, it can still be truned on by adding command line arguments (i.e. =-t= or =--thread=) in the input. For example the following input in the minibuffer will ensure that threads are on even if =consult-mu-search-threads= is set to nil.

#+begin_example
#flag:unread -- -t
#+end_example

**** =consult-mu-group-by=
This variable determines what field is used to group messages. This aloows quick movement between groups (For example with =vertico-next-group= if you use [[https://github.com/minad/vertico][vertico]])

By default it is set to :date. But can be any of the following:

  - :subject      group by mail title
  - :from         group by name/email of the sender(s)
  - :to           group by name/email of the receiver(s)
  - :date         group by date in the format "Thu 09 Nov 23"
  - :time         group by the time of email in the format "20:30:07"
  - :datetime     group by date and time of the email with the format "2023-11-04 08:30:07 PM"
  - :year         group by the year of the email (i.e. 2023, 2022, ...)
  - :month        group by the month of the email (i.e. Jan, Feb, ..., Dec)
  - :week         group by the week number of the email (.i.e. 1, 2, 3, ..., 52)
  - :day-of-week  group by the day email was sent (i.e. Monday, Tuesday, ...)
  - :size         group by the file size of the email
  - :flags        group by flags (as defined by mu)
  - :tags         group by tags (as defined by mu)
  - :changed      group by the date changed (as defined by :changed field in mu4e)

Note that grouping works alongside sorting. For example if  =consult-mu-group-by= is set to =:day-of-week= and =consult-mu-search-sort-field= is set to =:date=, then the messages are grouped by day of week (e.g. all emails on Tuesdays will be in one group) then ordered chronologically within each group.

**** =consult-mu-mark-previewed-as-read=
This determines whether a message is marked as =read= when it is simply previewed (see =consult-mu-preview-key= above and documentation on =consult-preview-key=).

Note that when =consult-mu-preview-key= is set to ='any=, then as soon as =consult-mu= or =consult-mu-async= retrieve some results a preview for the first message is shown and this can be marked as read if =consult-mu-mark-previewed-as-read= is set to t.

**** =consult-mu-mark-viewed-as-read=
This determines whether a message is marked as =read= when it is viewed (i.e. when the minibuffer candidate is selected by hitting =RET=).

**** =consult-mu-preview-key=
This is similar to =consult-preview-key= but only for =consult-mu=. By default, it is set to the value of consult-preview-key to keep consistent experience across different consult packages, but you can set this variable explicitly for consult-mu.

The recommended option si to set this to ='any= so as you naviagte over the candidates you see previews updated.

#+begin_src emacs-lisp
(setq consult-mu-preview-key 'any)
#+end_src

If the option above slows down your system, and you only want to load previews on demand, then you can set it to a specific key such as ="M-o"=.

#+begin_src emacs-lisp
(setq consult-mu-preview-key "M-o")
#+end_src

You can also turn previews off by setting this variable to =nil=, but this is not generally recommended.


**** =consult-mu-highlight-matches=
This variable determines if consult-mu highlights search queries in minibuffer or preview buffers. By default it is set to t.

When it is set to t, all matches of the search term are highlighted in the minibuffer allowing you to notice why the email is a search hit.

For example in the screenshot below, I am searching for the term =consult-gh= and all the matches of consult-gh are highlighted in the titles.

#+attr_org: :width 800px :height nilpx
#+attr_latex: :width 800px :height nilpx
#+attr_html: :width 800px :height nilpx
[[https://github.com/armindarvish/consult-mu/blob/screenshots/screenshots/highlight-matches-minibuffer.png]][[file:../../Pictures/2023-11-14_09-48-43_screenshot.png]]

Furthermore if I look at a preview, all the instances of consult-gh matches in the preview buffer are also highlighted:

#+attr_org: :width 800px :height nilpx
#+attr_latex: :width 800px :height nilpx
#+attr_html: :width 800px :height nilpx
[[https://github.com/armindarvish/consult-mu/blob/screenshots/screenshots/highlight-matches-preview.png]]

Note that when the candidate is selected (i.e. by pressing =RET=), the highlight overlay is turned off, so you can see the orignial message as is, but you can call =consult-mu-overlays-toggle= (i.e. =M-x consult-mu-overlays-toggle=) to see the highlights of the query again.


#+attr_org: :width 350px :height nilpx
#+attr_latex: :width 350px :height nilpx
#+attr_html: :width 350px :height nilpx
[[https://github.com/armindarvish/consult-mu/blob/screenshots/screenshots/highlight-matches-view-off.png]]
#+CAPTION: When Message is viewed highlight overlays are turned off.

#+attr_org: :width 200px :height nilpx
#+attr_latex: :width 200px :height nilpx
#+attr_html: :width 200px :height nilpx
[[https://github.com/armindarvish/consult-mu/blob/screenshots/screenshots/highlight-matches-view-on.png]]
#+CAPTION: higlhights are turned back on by =M-x consult-mu-overlays-toggle=.


**** =consult-mu-action=
This variable stores the function that is called when a message is selected (i.e. =RET= is pressed in the minibuffer). By default it is bound to =consult-mu--view-action= which opens both the headers buffer and view buffer and shows the content of the selected message.

*** Example Customization for Good Performance and Functionality
Here is a good customization for great performance as well as functionality:

#+begin_src emacs-lisp
(use-package consult-mu
  :straight (consult-mu :type git :host github :repo "armindarvish/consult-mu" :branch "develop")
  :after (consult mu4e)
  :custom
  ;;maximum number of results shown in minibuffer
  (consult-mu-maxnum 200)
  ;;show preview when pressing any keys
  (consult-mu-preview-key 'any)
  ;;do not mark email as read when previewed. If you turn this to t, be aware that the auto-loaded preview if the preview-key above is 'any would also get marked as read!
  (consult-mu-mark-previewed-as-read nil)
  ;;amrk email as read when selected.
  (consult-mu-mark-viewed-as-read t)
  ;; define a template for headers view in minibuffer. The exmaple below adjusts the width based on the width of the screen.
  (consult-mu-headers-template (concat "%f" (number-to-string (floor (* (frame-width) 0.18))) "%s" (number-to-string (floor (* (frame-width) 0.6))) "%d13" "%g" "%x"))
  :config
  ;;create a list of saved searches for quick access using `histroy-next-element' with `M-n' in minibuffer. Note the "#" character at the beginning of each query!
  (setq consult-mu-saved-searches '("#flag:unread"
                                    "#(maildir:/inbox/"))
  ;; require embark actions for marking, replying, forwarding, etc. directly from minibuffer
  (require 'consult-mu-embark)
  )
#+end_src

* Features and Demos
To be completed!

* Bug reports
To report bug, first check if it is already reported in the [[https://github.com/armindarvish/consult-mu/issues][*issue tracker*]] and see if there is an existing solution or add relevant comments and discussion under the same issue. If not file a new issue following these steps:

1. Make sure the dependencies are installed, and both =mu4e= and =consult= work as expected.

3. Remove the package and install the latest version (along with dependencies) and see if the issue persists.

4. In a bare bone vanilla Emacs (>=28) (e.g. =emacs -Q=), install the latest version of consult-mu (and its dependencies) without any configuration or other packages and see if the issue still persists.

5. File an issue and provide important information and context in as much detail as possible in your bug report. Important information can include:
- Your operating system, version of Emacs (or the version of emacsen you are using), version of mu/mu4e and consult (see [[https://github.com/emacsorphanage/pkg-info][pkg-info]]).
- The installation method and the configuration you are using with your consult-mu.
- If there is an error message, turn debug-on-error on (by =M-x toggle-debug-on-error=) and include the backtrace content in your report.
- If the error only exists when you have some other packages installed, list those packages (e.g. problem happens when evil is installed)
- It would be useful, if you can look at consult-mu buffers while the minibuffer command is active (by default they are named =*consult-mu-headers*= and =*consult-mu-view*= buffers) and report whether theya re getting populated properly or not.

* Contributions
This is an open source package, and I appreciate feedback, suggestions, ideas, etc.

If you want to contribute to the code, please note that the main branch is currently stable (as stable as a work in progress like this can be) and the develop branch is the current work in progress. So, *start from the develop branch* to get the latest work-in-progress updates and create a new branch with names such as feature/name-of-the-feature or fix/issue, ... Do the edits and then create a new pull request to merge back with the *develop* branch when you are done with your edits.

Importantly, keep in mind that I am using a *literate programming approach* (given that this is a small project with very limited number of files) where everything goes into *consult-mu.org* and then gets tangled to appropriate files (for now that includes consult-mu.el and consult-mu-embark.el). If you open a pull-request where you directly edited the .el files, I will likely not approve it because that will then get overwritten later when I tangle from the .org file. In other words, *Do Not Edit The .el Files!* only edit the .org file and tangle to .el files.

* Acknowledgments
Obviously this package would not have been possible without the fabulous [[https://github.com/djcb/mu][mu/mu4e]], and [[https://github.com/minad/consult][consult]] packages. It also took inspiration from other packages including but not limited to [[https://github.com/seanfarley/counsel-mu][counsel-mu]], [[https://github.com/emacsmirror/consult-notmuch][consult-notmuch]], [[https://github.com/fuxialexander/counsel-notmuch][counsel-notmuch]].
