#+include: ~/OrgFiles/armin/org-macros.setup
#+OPTIONS: h:1 num:nil toc:nil d:nil

#+TITLE: consult-mu - use [[https://github.com/minad/consult][consult]] asynchronously to search mu4e emails in the minibuffer
#+AUTHOR: Armin Darvish
#+LANGUAGE: en

#+html: <a href="https://github.com/armindarvish"><img alt="Armin Darvish" src="https://img.shields.io/static/v1?label=Armin%20Darvish&message=consult-mu&color=00A8B0&logo=github"/></a>
#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://img.shields.io/static/v1?label=Made%20For&message=GNU%20Emacs&color=7a5aba&logo=gnuemacs&logoColor=white"/></a>



* About consult-mu

** Main Functions and Interactive Commands
Consult-mu provides a dynamiccaly updated search interface to mu4e. It uses the awesome package [[https://github.com/minad/consult][consult]] by [[https://github.com/minad][Daniel Mendler]] and [[https://github.com/djcb/mu][mu/mu4e]] by [[https://github.com/djcb/][Dirk-Jan C. Binnema,]] and optionally [[https://github.com/oantolin/embark][Embark]] by [[https://github.com/oantolin][Omar Antol√≠n Camarena]] to improve the search experience of mu4e. There two main interactive commands:

1. =consult-mu=: Provides a dynamic version of =mu4e-search=. As the user types inputs, the result gets updated. This command uses a modified version of =mu4e-search= and then takes the content of =mu4e-headers= buffer to populate minibuffer completion table. This allows the user to change the query or search properties (such as number of results, sort-field, sort-direction, ...) dynamically by changing the input in the minibuffer. In addition previews of the results can be viewed similar to other consult functions. Once a candidate is selected, the user will see the search result sin =mu4e-headers=, and =mu4e-view= buffers similar to mu4e-search results.

2. =consult-mu-async=: This function provides a very fast search without loading mu4e-headers, which means mu4e functionalities (like marks, reply, forwards, etc.) are not available in the preview buffer. This is very useful for finding individual emails or threads in a large pool quickly (in other words "a needle in a haystack" scenarios!). Previews can be seen while the results are being populated asynchronously (without populating mu4e-headers buffer). Upon selection of a candidate, mu4e-headers buffer is populated with only an individual email (or thread). From here all the normal functionalities of mu4e is again available.

The advantage of =consult-mu-async= over =consult-mu= is that it is very fast for searching several thousands messages (even faster than [[https://github.com/emacsmirror/consult-notmuch][consult-notmuch]]!), but cannot populate a mu4e-headers buffer with all the results. On the other hand, =consult-mu= is slower when there are thousands of hits for the search term but provides full functionality for all the results. Therefore depending on the use case, the user can chose which functions serves the purpose better.

Furthermore, consult-mu, also provides a number of useful [[https://github.com/oantolin/embark][Embark]] actions that can be called from within minibuffer (see examples below.). However, wehn using embark actions, be advised that sometimes you may get an error especially when using =consult-mu-async=. These are likely not critical errors and are usually caused because after running embark actions the databse can be out of sync with the results. In such cases syncing the database should resolve the issue.

** Why we need a new package such as consult-mu?
While mu4e built-in search is great and provides ways to edit search terms or toggle search properties, the interface is not really intuitive in 2023 anymore. I am simply too impatient to wait for search results (especially if there are hundreds or thousands of hits) and much prefer having a dynamically updated completion table. Thankfully this is easily available now by using [[https://github.com/minad/consult][consult]].

*** Why not use other alternatives like [[https://github.com/emacsmirror/consult-notmuch][consult-notmuch]]?
While [[https://notmuchmail.org/notmuch-emacs/][notmuch-emacs]] and [[https://github.com/emacsmirror/consult-notmuch][consult-notmuch]] provide a very fast email search and view functionality, notmuch lacks lots of basic functionalitites of an email client. It is supposed to be notmuch after all! As a result, using notmuch as an email client is not very practical especially if you want to use it along with other mail clients (e.g. web-clients, mobile apps, etc.) While in Emacs nothing is impossible and there are ways to add such functionalities and improve the experience (  and for examples), the end results is still likely not the easiest solution to integrate with other tools (like mobile apps, or IMAP based clients). This is because the philosophy of using tags instead of folders requires a completed redesign of workflows and unless you are willing to stick to notmuch and its philosophy, it is difficult to use it as a general purpose email client.

More importantly, the reason people prefer notmuch over mu4e is its speed and simplicity, but using the underlying =mu= commands and server can also be very fast. In fact (at least in my tests), =consult-mu-async=, which uses the command line =mu= commands is in fact faster than =consult-notmuch=, and therefore using =mu4e= with =consult-mu= provides the best of both worlds to me. When I need speed, I can use =consult-mu-async= to do a fast search (and find thousands of hits) and quickly narrow down to what I am looking for; and when I need a more complete and full-feature client I can use =mu4e= built-in functionalities, especially with addition of dynamically built searches with =consult-mu=, I have a modern intuitive interface as well.

* Getting Started
** Installation
Before you start, make sure you understand that this is work in progress in its early stage and bugs and breaks are very much expected.
*note that*: Because [[https://github.com/djcb/mu][mu4e]] tends to take over buffer/windows management, I had to reimplement (a.k.a. hack) some of the functionalities in order to provide quick previews that stay out of your the way when the minibuffer command is done (or canceled), and as a result there is a good chance that errors will arise in edge cases that I have not tested.

*** Requirements
In order to use consult-mu, you need the following requirements:

**** [[https://github.com/djcb/mu][mu4e]]:

**** [[https://github.com/minad/consult][consult]]:

*** Installing consult-mu package
Consult-mu is not currently on [[https://elpa.gnu.org/packages/consult.html][ELPA]] or [[https://melpa.org/#/consult][MELPA]]. Therefore, you need to install it using an alternative non-standard package managers such as [[https://github.com/radian-software/straight.el][straight.el]] or use manual installation.

**** straight.el
To install consult-mu with straight.el you can use the following command. Make sure you load consult-mu *after loading mu4e and consult (e.g. =require consult=, =require mu4e=)*

#+begin_src emacs-lisp
(straight-use-package
 '(consult-mu :type git :host github :repo "armindarvish/consult-mu" :branch "main"))
#+end_src

or if you use =use-package= macro with straight, you can do:

#+begin_src emacs-lisp
(use-package consult-mu
	:straight (consult-mu :type git :host github :repo "armindarvish/consult-mu"
        :after mu4e consult)
)
#+end_src

You can also fork this repository and use your own repo.

**** manual installation
Clone this repo and make sure the files are on your load path, as described on [[https://www.emacswiki.org/emacs/LoadPath][EmacsWiki]].

*Make sure you load consult and mu4e (e.g. =require consult=, =require mu4e=) before you load consult-mu.*

** Configuration
consult-mu is built with the idea that the user should be able to customize everything based on their use-case, therefore the user is very much expected to configure consult-mu according to their use case.

I recommend you read through this section and understand how to configure the package according to your needs and for your specific use-case, but if you just want a drop-in minimal config, look at the snippet below:

#+begin_src emacs-lisp
(use-package consult-mu
  :straight (consult-mu :type git :host github :repo "armindarvish/consult-mu" :branch "develop")
  :after (consult mu4e)
  :custom
  ;;maximum number of results shown in minibuffer
  (consult-mu-maxnum 200)
  ;;show preview when pressing any keys
  (consult-mu-preview-key 'any)
  ;;do not mark email as read when previewed
  (consult-mu-mark-previewed-as-read nil)
  ;;do not amrk email as read when selected. This is a good starting point to ensure you would not miss important emails marked as read by mistake especially when trying this package out. Later you can change this to t.
  (consult-mu-mark-viewed-as-read nil)
  ;; open the message in mu4e-view-buffer when selected.
  (consult-mu-action #'consult-mu--view-action)
  )
#+end_src

*** Customization
The following customizable variables are provided:

*** =consult-mu-headers-buffer-name=

**** =consult-mu-args=

**** =consult-mu-maxnum=

**** =consult-mu-search-sort-field=

**** =consult-mu-headers-fields=

**** =consult-mu-headers-template=

**** =consult-mu-search-sort-direction=

**** =consult-mu-search-threads=

**** =consult-mu-group-by=

**** =consult-mu-mark-previewed-as-read=

**** =consult-mu-mark-viewed-as-read=

**** =consult-mu-headers-buffer-name=

**** =consult-mu-view-buffer-name=

**** =consult-mu-preview-key=

**** =consult-mu-highlight-matches=

**** =consult-mu-action=

*** Example Customization for Good Performance and Functionality
Here is a good customization for great performance as well as functionality:

#+begin_src emacs-lisp
(use-package consult-mu
  :straight (consult-mu :type git :host github :repo "armindarvish/consult-mu" :branch "develop")
  :after (consult mu4e)
  :custom
  ;;maximum number of results shown in minibuffer
  (consult-mu-maxnum 200)
  ;;show preview when pressing any keys
  (consult-mu-preview-key 'any)
  ;;do not mark email as read when previewed. If you turn this to t, be aware that the auto-loaded preview if the preview-key above is 'any would also get marked as read!
  (consult-mu-mark-previewed-as-read nil)
  ;;amrk email as read when selected.
  (consult-mu-mark-viewed-as-read t)
  ;; open the message in mu4e-view-buffer when selected.
  (consult-mu-action #'consult-mu--view-action)
  ;; define a template for headers view in minibuffer
  (consult-mu-headers-template (concat "%f" (number-to-string (floor (* (frame-width) 0.18))) "%s" (number-to-string (floor (* (frame-width) 0.6))) "%d13" "%g" "%x"))
  :config
  ;;create a list of saved searches for quick access using `histroy-next-element' with `M-n' in minibuffer
  (setq consult-mu-saved-searches '("#(maildir:/gmail/Inbox/"))
  ;; require embark actions for marking, replying, forwarding, etc. directly from minibuffer
  (require 'consult-mu-embark)
  )
#+end_src

* Features and Demos
To be completed!

* Bug reports
To report bug, first check if it is already reported in the [[https://github.com/armindarvish/consult-mu/issues][*issue tracker*]] and see if there is an existing solution or add relevant comments and discussion under the same issue. If not file a new issue following these steps:

1. Make sure the dependencies are installed, and both =mu4e= and =consult= work as expected.

3. Remove the package and install the latest version (along with dependencies) and see if the issue persists.

4. In a bare bone vanilla Emacs (>=28) (e.g. =emacs -Q=), install the latest version of consult-mu (and its dependencies) without any configuration or other packages and see if the issue still persists.

5. File an issue and provide important information and context in as much detail as possible in your bug report. Important information can include:
- Your operating system, version of Emacs (or the version of emacsen you are using), version of mu/mu4e and consult (see [[https://github.com/emacsorphanage/pkg-info][pkg-info]]).
- The installation method and the configuration you are using with your consult-mu.
- If there is an error message, turn debug-on-error on (by =M-x toggle-debug-on-error=) and include the backtrace content in your report.
- If the error only exists when you have some other packages installed, list those packages (e.g. problem happens when evil is installed)
- It would be useful, if you can look at consult-mu buffers while the minibuffer command is active (by default they are named =*consult-mu-headers*= and =*consult-mu-view*= buffers) and report whether theya re getting populated properly or not.

* Contributions
This is an open source package, and I appreciate feedback, suggestions, ideas, etc.

If you want to contribute to the code, please note that the main branch is currently stable (as stable as a work in progress like this can be) and the develop branch is the current work in progress. So, *start from the develop branch* to get the latest work-in-progress updates and create a new branch with names such as feature/name-of-the-feature or fix/issue, ... Do the edits and then create a new pull request to merge back with the *develop* branch when you are done with your edits.

Importantly, keep in mind that I am using a *literate programming approach* (given that this is a small project with very limited number of files) where everything goes into *consult-mu.org* and then gets tangled to appropriate files (for now that includes consult-mu.el and consult-mu-embark.el). If you open a pull-request where you directly edited the .el files, I will likely not approve it because that will then get overwritten later when I tangle from the .org file. In other words, *Do Not Edit The .el Files!* only edit the .org file and tangle to .el files.

* Acknowledgments
Obviously this package would not have been possible without the fabulous [[https://github.com/djcb/mu][mu/mu4e]], and [[https://github.com/minad/consult][consult]] packages. It also took inspiration from other packages including but not limited to [[https://github.com/seanfarley/counsel-mu][counsel-mu]], [[https://github.com/emacsmirror/consult-notmuch][consult-notmuch]], [[https://github.com/fuxialexander/counsel-notmuch][counsel-notmuch]].
